{"agility":{"title":"On Agility","links":["Agile","tags/inbox/in-progress","tags/wtp-draft","tags/blog/publish","2024-11-05"],"tags":["inbox/in-progress","wtp-draft","blog/publish"],"content":"We spend so much time focusing on how our teams can be agile. There are methods and books and classes and certificates and tons of arguments online about the pros and cons of one way versus another. Whats the point of agility? Why is agility the goal? Are you sure you actually want that?\nTheres some fear around moving Not Fast Enough among software teams. Someone else will beat you! Theres also the reality that you probably work for a company that is spending more money than it is bringing in, so every day you spend time on the Wrong Thing, every sprint you “miss” by a couple days, every quarter where you don’t hit the sales numbers or don’t ship that feature is gone and you’re now one quarter closer to having no more money. \nAgility is purported to be the solution. React to new information quickly! Shift gears and focus to the right thing instead of the wrong thing now that we have the new information! Think about the smallest work you can do to have the biggest impact! In my opinion, these are all great targets to aim at for small venture backed teams. But is the way you are running agile actually enabling that? When have you ever actually changed goals mid quarter or shifted the team to focus on something new out of a normal “sprint cycle”? \nThere seems to be two Actual Outcomes when some new piece of information is learned. The worst outcome is that you and your team treat the new thing as the most important thing and also don’t actually agree to stop working or focusing on the other in-progress stuff. You only have so many times you can tell your team that this new thing interrupting their current work is the Most Important Thing before they either stop believing you or stop believing themselves. \nThe other outcome (the one I think is the funniest) is that your “agile” method literally prevents you and your team from shifting gears because the process you’ve put in place is too rigid. “We can’t just add an extra week to the current sprint, we have all the meetings already scheduled.” “We can’t just do a random grooming meeting before we do our sprint planner, that’s not how we do this!” \nI don’t really have a diagnosis for this problem. I think we need to think about if we actually want to be Agile or not. I think it’s ok to not be, but we should just be honest about it because then we can actually build a process that enables us to do the right work. I think some projects probably require a specifically non-agile way of planning and executing the work. I think if we do want to be agile, we need to be more agile about The Way We Do Agile.\n\nOrigin:\nReferences: Agile\nTags:in-progresswtp-draftpublish\nCreated: 2024-11-05"},"bottlenecks-and-pull-requests":{"title":"Bottlenecks and Pull Requests","links":["Things-To-Follow","Jason-Liggayu","Crimson-Sage","tags/inbox/in-progress","tags/blog/publish","tags/whatsthepoint/notes","2024-2-10"],"tags":["inbox/in-progress","blog/publish","whatsthepoint/notes"],"content":"This post was originally a response to a long comment on the parent post about why “all PRs must point at main”.\nLet me start by saying my thinking is actually more of a belief. There is some pseudo science and anecdata baked in, but it’s more based on gut checks than any cold hard facts. Bad news for you, changing someone’s belief is harder than changing someone’s thinking based on fact. Worse news for you: this is belief ive had about teams and git process for like 8 years lol.\nI have two main goals with my process things. 1. engineering morale fueled by real felt delivery, progress, impact, unblocked-ness, etc. and 2. Consistency of team delivery (even over shipping a lot). funnily enough, consistency, in my experience on many teams, is one of the easiest ways to improve engineering morale.\nIt makes it easier to plan, easier to set goals, and then to hit them (all consistently).\nOk so how do you drive consistency for engineering? My preferred method is to follow most of the things in [here](Things To Follow)\nMake an epic that represents some meaningful progress towards a change in the system. An epic should be able to be described to non engineers and they should understand that chunk of work’s value\nA project team should be able to complete at least one epic a week, in terms of sizing of the epic. You could achieve this by making all epics roughly two weeks large, and offsetting them such that at least one epic gets done per week. This is hard to do, but not for the reason you might think. Its hard to do because it requires thinking about the Work To Be Done differently than if you were just going to write a bunch of tickets (or worse, get handed a bunch of tickets by PMs).\nWith the constraint of needing to think about how to Right Size epics, planning your projects, especially very long/big ones, becomes an exercise in and of itself. A few project teams on sage have done this to great effect over the past couple years.\nDoing this well, or even kinda well, enables a project team to plan an entire quarters worth of work, and get pretty damn close to hitting every single deadline.\nBeing able to celebrate an epic (or two, or three) getting completed every week, to look at the plan and what we’ve finished already reduces the chances of big projects having that “no end in sight” problem that usually creeps in at the end. “the last 20% of a project takes 80% of the total time”\nSo we’ve got the epics. They’re planned. We think they are roughly a week or two of work with maybe one or two or even three engineers working on each at a time.\nSidenote: My preference is always for epics that can be swarmed on rather than multiple epics in flight at a time. Two epics, the first completed in week 1 and the second completed in week 2, is 100% more preferable than both being worked on simultaneously, neither getting done in week one, and both getting completed sometime in week 2.\nNow its time to think about how to do the work involved in completing a particular epic.\nThe biggest bottleneck in the product development lifecycle is the pull request. Giving a solid code review takes a lot of time. Usually the code reviewer needs to look at the same PR a couple times after various changes are made and comments are addressed. Time spent giving code review is time spent not working on new items, so the bottleneck has a doubly compounding effect on the rest of the system.\nThe part of the system with the highest throughput is the code writing portion. This means its quite easy for engineers to produce much more code that needs to be reviewed than there is time/resources to review the code and get it merged, resulting in a backup at the PR phase, making the bottleneck have an even even even larger affect on the throughput as now there is a backlog of things, causing engineers to spend much more time reviewing than normal.\nThinking about the entire product development lifecycle as a system, and applying the law that the maximum throughput of a system (a work item going all the way from the very beginning to the very end, ie in production) is capped by the throughput of the bottleneck. Said another way, the fastest we can actually ship can be measured simply by looking at how fast we can get PRs merged and shipped to prod.\nBecause your job is to put actual software into production, simply doing a lot of tickets and opening a lot of PRs gives you a false sense of progress and speed. You now need to wait for a lot of code review, you need to switch contexts for each ticket. The longer a PR stays open, the faster it rots, the harder it is to keep track of the state of it, the more time you’re wasting not working on the next thing, and the worse your morale gets.\nWe do one ticket at a time until it is merged and in production. You arent going slower here, you are simply being realistic about the actual throughput of the system.\nAgain, the total throughput of the system is capped by PRs getting merged into main.\nWe all know many ways to get PRs reviewed faster. Add a great description, give it a review yourself before asking someone else to look at it to make sure they don’t have to review it again after finding something silly, linters/tests, making the PR smaller.\nTools that handle complex dependent PRs like Graphite are great because they make big PRs smaller. I am completely unsurprised that the feedback from reviewers is positive. But it doesn’t actually increase the throughput. It makes PRs easier to merge into other PRs, not main. When you’ve got a PR targeting another PR you’re stacking a bottleneck up behind another bottleneck. And thats not accounting for any potential rebasing shenanigans you’d need to account for along the long chain of related PRs as one or two or three of the PRs stays open for more days. You better pray you don’t have consistent conflicts you need to address along the chain each time you rebase!\nThe goal here is engineering morale, and I am stoked that we found a very cool tool to break up PRs. And hey, sometimes a PR just has to be big, I hope more people on the team can use this tool to break up that once a year big PR.\nBut my challenge to you is this: plan the work in such a way that each ticket can independently get merged into main. Make the tickets right sized so that you can get a few merged a week. This means, when writing tickets, think about the size you estimate it to be. If you think a ticket will take longer than three days, turn it into two tickets at that point, not after youve done all the work and are trying to break it up into multiple PRs. Don’t open more than one PR at a time because thats you stacking more work up behind the bottleneck in the system. Doing this consistently will feel great, will make it easier to predict when things are due, and will reduce the frustration/headache of managing multiple interrelated PRs.\nIn summary, push the breaking up of the work into multiple PRs before you do the work. Put that plan into separate tickets, and do one ticket at a time until it is merged to main.\n\nOrigin: response to a comment by Jason Liggayu on the original publishing of this in Crimson Sage confluence\nReferences:\nTags:in-progresspublishnotes\nCreated: 2024-2-10"},"how-we-code-review":{"title":"How We Code Review","links":["The-Wing","Code-Review","tags/inbox/in-progress","tags/blog/publish","2024-04-15"],"tags":["inbox/in-progress","blog/publish"],"content":"\nThis has been written and rewritten a couple times for a handful of different teams. Consider it a starting place/template\n\nAll of our engineering work makes it to production by first passing through a code review. No line of code is too small or inconsequential to bypass this part of our product lifecycle. We should be aiming for quick turn around on code review and merging/deploying. Firstly, it feels great to have momentum on work. Secondly, it prevents existing work from getting stale, rotting away in a PR. But most importantly, work isn’t done until it is merged, so helping your coworkers get their things across the line is the most important thing you can be doing!\nOpening a Pull Request\nWhen opening a pull, a few things will help get quick and actionable feedback.\n\nUse the PR template that is added by default\n\n. Reference the ticket\nprovide a test plan with relevant login info and environment preparation\n\n\nGive yourself a code review. How embarrassing would if be if you’ve been complaining that no one is looking at your PR and then there’s a really silly oopsie daisy right there you could have found if you looked?\n\nTest your own test plan line for line.\nGo through your diff, add some comments for the other reviewers if there is some noise they can “ignore” or things worth calling out.\nIf your PR contains a migration, ensure it doesn’t conflict with migrations other folks are working on. Made changes to the API? Make sure they wont break support for employee app or tools\n\n\nAdd at least two code reviewers. We’re still building all new stuff and it’s important to make sure more than just one other person sees the foundations you’re building.\n\nGiving a Code Review\nA code review is our first line of defense when it comes to shipping high quality software. It also ensures a ticket soars through any non-engineering testing and goes to production faster. Reviewing code should be ~50% of your “code related duties” and you should feel a sense of accomplishment if you spend a whole afternoon just reviewing pull requests.\n\nLook at the ticket the work was for. Having an understanding of the goal of the ticket is the first step to making sure the work was done correctly\nGo through the test plan in the ticket. Make sure it works! This is before you’ve even looked at any code at all.\nReview the code\n\nProvide helpful comments on syntax, organization, and performance\nWe are still a small team, sometimes its ok to ask someone to answer a question in person instead of leaving a comment on their pull\n\n\nIf you are assigned, you need to review!\n\nPlease don’t let 24 hours pass before completing the review\nIf you are unable for any reason to give the code review, let the person know as soon as possible\n\n\n\nHow to get feedback\n\nGive it a second. People have other work they are probably finishing up, take the break you have to go give some rock solid code reviews. Earn some good will and bargaining chips!\nUse standup. Standup is the premium opportunity to tell people you will need code review. If your ticket is on the critical path, they should be more than happy to prioritize code review that day\nWhen all else fails, send an invite to block time on people’s calendars to code review your work.\n\n\nOrigin:  Wrote the first version at The Wing\nReferences:  Code Review\nTags:in-progresspublish\nCreated: 2024-04-15"},"index":{"title":"Welcome to my blog","links":[],"tags":[],"content":""},"things-to-follow":{"title":"Things To Follow","links":["Bottlenecks-and-Pull-Requests","Velocity-and-Story-Points","Justworks","Crimson-Sage","Story-Points","Agile","Pull-Request","tags/inbox/in-progress","tags/blog/publish","2024-01-27"],"tags":["inbox/in-progress","blog/publish"],"content":"\nGetting PR’s merged and deployed takes a higher priority than coding\nA ticket is not done until it is in prod\nAn epic is not done until all tickets in the epic are done\nA feature is not done until a customer is using it.\nEngineers shouldn’t have more than two Jira tickets in progress (in progress, in review, waiting for merge) at a time \nOne Jira ticket = One PR\n\nIf you find yourself needing to open a second PR, take a little extra time to make a separate ticket for the second PR.\n\n\nAll PRs must target main\n\nwhy? Read this: Bottlenecks and Pull Requests\n\n\nNo free floating tickets. all tickets are part of an epic\n\nJoanna Honikman: “if it’s not in Jira, it’s not happening. I’ve seen teams do a bunch of ‘quick’ things saying, ‘We don’t need a ticket…’ only to find they did 20 ‘quick’ things and nothing else. If it’s important enough to do instead of all the other work, it should be in a ticket, and it should roll up to something tangible.”\n\n\nProduct managers are the arbiters of whether an epic contains enough value on its own to be an epic or not. (may not be correct)\nSquads set weekly epic delivery goals. (one epic per week eg). The goal is consistency however small, even over end-of-quarter massive goals being hit. Consistency is the easiest path to predictability. (momentum, trust, ease of planning). - All tickets from an epic should be brought into the sprint. \nBig projects getting to 95% done by Friday are worthless. a small project to 100% done by the end of the week is everything. (hyperbolic…)\nWe don’t use story points on tickets.\n\nwhy? Read this: Velocity and Story Points\n\n\nNo ticket should be estimated to take longer than three business days to merge. \n\nIf you have a ticket that takes longer than three days, figure out how to get what youve done so far merged, and make a new ticket for the rest. Try to avoid “one more day and then today it gets merged. \nA PR with a single concept is much easier to review accurately &amp; quickly than one with several things all smooshed together even if they are part of the same feature. Atomic commits are also very, very helpful for reviewers.\n\n\n\n\nOrigin: Justworks Crimson Sage\nReferences: Crimson Sage Story Points Agile Pull Request\nTags:in-progresspublish\nCreated: 2024-01-27"},"value-based-velocity":{"title":"Value Based Velocity","links":["Velocity-and-Story-Points","Story-Points","Agile","tags/inbox/in-progress","tags/blog/publish","tags/blog/draft","tags/whatsthepoint/notes","2024-03-15"],"tags":["inbox/in-progress","blog/publish","blog/draft","whatsthepoint/notes"],"content":"Ok so we want to measure our velocity in terms of value shipped, but how do you do that? Here is one such way. I encourage you to to take this and create a new sprint process for your team or (better yet) fit it into your current process.\nCore concepts:\n\nValue - Measured in t-shirt sizes (S, M, L) and in relation to other possible things we could be working on. We don’t mean “value to the customer.” You don’t have to do any mental trickery and tell yourself “this internal user is the customer!!!” No, we think value in terms of Value to the Business. You believe some new feature is the missing item to get a big group of new customers in the door? Sure that’s valuable. Improvements to some tool operations uses prevents them from making mistakes or wanting to quit and open a coffee shop upstate? Seems valuable to me. Some refactor lets us build future features faster and better? That’s value. Can you can articulate some work that prevents engineers from sitting around for hours a week? That’s very high value considering engineers are a fairly high cost center to the business; giving them hours back a week is huge! Thinking this way lets you compare and contrast all units of work on the equal footing, removing the problem of Tech Debt vs Feature Work.\nEffort - Ok right off the bat I gotta be honest. I hate [story points](Velocity and Story Points). I hate how much time teams spend arguing about whether a ticket is a 3 or a 5. I hate how much anxiety comes from making sure you have pulled enough story points into a sprint. I hate how story points is an estimation of complexity or effort about a ticket and then we use that to measure how productive we are being. Basically, I hate how much emotional energy is lost to the heat sink that is story points. That being said, effort is still important to think about. We use effort, also measured in T-shirt sizes relative to the other thinks we could be working on, as a way to make sure we’re working on the right stuff or spending the right amount of effort for the resulting value.\n\n“Cullen what the heck,” you say, “You haven’t talked about velocity at all yet.” If you have read [this](Velocity and Story Points) you’ll remember that I made an argument that velocity should be a measurement of impact, not of effort. Let’s take our vocabulary and generate some metrics.\nLet’s give Large value work units (I like using Epics here) a score 1.0, Medium a 0.5, and Small 0.25. When all work related to that unit of work has been deployed to production, the team gets the points. This week’s velocity is measured by summing all the points of the completed work units this week. It’s as simple as that.\nSo now we’re tracking velocity in terms of value shipped, what does goal setting or reporting look like? You can (and should!) set goals around consistently shipping some amount of value weekly. Theres probably another post worth of my thoughts on consistency and why shipping one small thing a week is better than shipping one giant thing a month, but basically it feels really good to ship things, and it becomes much easier to estimate delivery dates when you have proof that you know how long a particularly sized epic takes to fully ship (because you’ve been consistently breaking things down into S/M/L and shipping at least one M effort epic a week, for example).\nQuarterly goals I’ve had squads set using this framework:\n\nLarge value or Large Value Equivalent (two mediums, four smalls, one large, etc) 12/14 weeks this quarter. (or 1.5 value, or 2! you can make up goal value and what number of weeks after you get the hang of it).\n\nI like this goal a lot for a bunch of reasons:\n\nit measures consistency\nhas a really nice side effect of getting teams of engineers to focus on one thing at a time until it is done, even delaying the start of some new work because other engineers swarm on this thing (one done thing is better than two in progress things)\nengineers spend Monday morning figuring out tactically what and how they will ship a Large Value Equivalent.\n\n\n\n\nSome goal around the arbitrage. Set the same points scoring for Effort as you do for Value, and measure the ratio of value points to effort shipped. Once you start measuring your (grumble) effort velocity, you can then begin to be tactical around the quarterly planning and estimating projects which span more than one work unit.\nSetting a goal around some percentage of the value coming from a specific initiative. Testing, tech debt, a new product or feature etc.\n\nA bullet list of things I didn’t know how to turn into paragraphs:\n\nWhat this looks like is, instead of trying to figure out how to fill up your sprint with enough effort (story points), your mission is to try and figure out how to fill your sprint with value that you could actually finish and ship.\n\nThis has a knock on effect of forcing the team to break down large projects into small shippable chunks.\n\n\nIf an an initiative has 7 tickets that got done this week and 1 ticket that is not yet started, the team doesn’t get the points. On Monday, when that final ticket gets merged and deployed, all the points for that contribute to that new week’s score.\n\nthis ensures the team focuses on FINISHING things and not just jumping to new projects. one completed project is better than two in progress ones.\n\n\nThis process creates a feedback loop. Engineers seek out work they could be doing that outputs value over effort, and have to (get to?) articulate tech debt cleanup in terms of value to the business.\n“Cullen this is gamifying sprints.” Yeah, and it&#039;s really fun to play this game. And teams who play it end up shipping way more value and doing way less work than teams who don’t. (also, story points are gamifying too, but in the wrong direction).\n\nCurious about how you might iterate your way towards this without dramatically changing everything? Have the lead engineer and the PM from a team get in a room. The PM lists out all the problems (or fully fledged features that are probably already designed) that they want to get worked on. The PM then assigns a Value estimation to each one. Try to be normally distributed here. Not all things can be Large value, because remember, this is a relative value. Then have the lead engineer go through and do a rough effort estimation. This does not have to be normally distributed. Now sort by Value (largest to smallest) and Effort (smallest to largest). Now look at the order. How does that feel? I bet not great. I bet someone (both of you) aren’t feeling great.\nHave the PM do their ideal ranking, ignoring effort. Make adjustments to the value so that it’s still Largest to Smallest by increasing value estimates on things that were moved up, and decreasing things that were moved down. Now the engineer gets to ask questions. Why is this large value? The engineer might be able to offer some reasoning behind why certain things are higher effort than the PM expected. Maybe this can turn into a conversation about other (easier) ways to get the same value.\nThese are baby steps in the direction and allows various leaders on the team to start getting comfortable with this way of thinking about work.\n\nOrigin:\nReferences: Story Points Agile\nTags:in-progresspublishdraftnotes\nCreated: 2024-03-15"},"velocity-and-story-points":{"title":"Velocity and Story Points","links":["Justworks","Story-Points","02---areas/inbox/Agile","tags/inbox/in-progress","tags/wtp-draft","tags/blog/publish","2024-08-15"],"tags":["inbox/in-progress","wtp-draft","blog/publish"],"content":"Right now in (zoom) conference rooms across the globe, some engineering manager or product manager is talking about, defending, or setting goals around Velocity. The engineers in the room are playing along, maybe debating the pros and cons of using Fibonacci or T-Shirt sizes as the metric by which they declare the “story points” of planned work. At the same time, sometimes in the same room, product managers or company leadership is asking for a description of upcoming work in terms of “milestones” and an estimate (and commitment!) for when the upcoming work will be completed. The meeting ends and everyone agrees and then deadlines are missed, scope is cut, tech debt is ignored, and shortcuts are taken to get the desired product changes into production sooner. So what happened? Where is the disconnect between engineering velocity and shipping The Thing?\nFirstly, we should talk about how velocity is measured in most engineering teams (and indeed at Justworks). Typically, we talk about velocity in terms of Story Points. I asked around for definitions of what this story point estimate means and got a couple different answers. To some, it’s an expression of amount of time the work will take. To others, it describes the relative complexity of the work. Either way it is an estimate on some definition of “Effort,” be it body or brain. During the scrum process, engineers go through the process of estimating the story points of tickets we are ready or just about ready to work on. Every two weeks (or whatever), the team goes through the process of picking tickets that are ready to be worked on and pulling them into a queue. Which tickets we bring in and in what order is usually the result of a group conversation. Sometimes certain work has to happen before others. Sometimes we just want to bring this thing into the sprint before that other thing for nebulous reasons. Finally, the team looks at how many total Story Points we’ve brought into the sprint and takes a pulse check on if its the Right Amount of Work for the next two weeks. Looking at historical Total Story Points Shipped Per Sprint becomes a de facto representation of the team’s velocity.\nAt some point, after some number of sprints (and thus some number of story points worked on), new features or system improvements can be considered complete and the team can celebrate the delivery on milestones the rest of the company is patiently waiting on. Hurray!\nSo we’re meticulously estimating and tracking the amount of Work We Do and then reporting on that. Is this what we actually want? Does the sales team care if our velocity is “60 story points a sprint”? or do they only really care about when the feature they’ve already sold is going to be in production? Why is our goal to do a certain amount of work? Do people care how hard we’re working each sprint if we’re not shipping anything that matters?\nThe problem seems to be that teams have higher level goals of shipping something which the rest of the organization sees as some Valuable Thing. And separately, the way the product team plans their day to day work is by stacking it up with Effort (either real actual hard work, or inflated effort so as to fill up the Effort-Velocity Bucket).\nThere is no connection between the metrics we use to measure our day to day progress and the larger goal we hope to achieve. Said another way, there is nothing preventing the team from filling the sprint with hard/complex/time consuming tasks that don’t make any meaningful progress towards the larger milestones/objectives/features/product. (Note: I am not claiming that engineers here or anywhere would ever do such a thing, but you have to wonder: if engineers are measured on their velocity for raises or promotions, is there a chance that some subconscious over-estimating is happening?)\n“But Cullen,” you exclaim, “product managers have a say in what gets brought into the sprint! This prevents engineers from pulling in things that don’t matter!”\nThe issue, as I see it, is that this now creates a conflict between engineering and Product. Things that engineers consider tech debt are ignored for tickets that ladder up to the new feature. Furthermore, product managers now become the arbiter of the order in which things get built. Sure, the team can have conversations and make a case for one particular thing before another but at the end of the day, some one gets to issue the edict that this ticket is more important (or…valuable hint hint) than another ticket.\nSo what is to be done? At a macro level (quarterly, annually, and in relation to other teams in the org), a particular Pod’s velocity actually is Value Delivered. What did you ship? What impact did it have on the business? The Value Delivered is the thing that matters to the business, so why don’t we estimate the value of the work we are planning?\nIntroducing the Dual Metric Estimation Sprint Planning System (real name TBD). I would never advocate for getting rid of the story point estimate. Calibrating as a team on the effort required to do some unit of work gives us a lot of useful information. But I believe we should also be estimating the Value Impact of the work we are doing. Going further, I suggest that we should be filling up the sprint based on Value Points Estimate instead of Effort (story) Point Estimates. This strategy gives us some useful new dynamics within the pod and in sharing out our progress to the rest of the org.\nFirstly, it creates a more “same sides” feeling between the product manager and the engineers. Now, PMs are on the hook for estimating and defending the value of chunks of work (tickets or epics, that’s an implementation detail).  And engineers’ progress and performance is measured by that same value estimate. Additionally, engineers can present technical work as an expression of value delivered to the company (eg. this test improvement will save us 8 engineering hours a week, that’s money and time saved), giving the team a way to compare two different types of work. The effort estimate then becomes the way we rank work of similar value. For example if two tickets are of equal value, why wouldn’t we do the lower effort thing first? That way, we get closer to hitting our Sprint Value Delivery Goal. If a chunk of work is estimated as medium value but high effort, its now on the team to figure out either how to make it more valuable, or how to reduce the effort (work getting broken up into smaller units of valuable deliveries is another nice side effect of this process).\nSecondly, because of our natural inclination to game systems, the product team is now encouraged to figure out how they can get a certain amount of value shipped to production with the least amount of effort. Now we’re being Agile! The team will be working together, PMs, engineering, design, QA and all the rest to focus on getting the value points per sprint they’ve all committed to.\nThirdly, when speaking to the rest of the org, the team can talk about the “points” completed each sprint and have it actually mean something. Instead of saying “we’ve been really really busy”, the team can say “we’ve shipped this much value.” Now the conversation is on a level playing field. The rest of the org understands the concept of value, and they can agree or disagree about how valuable something was or was not but at least we now have a metric we can all use to talk about work shipped.\nAt the end of the day, there’s a lot to be unpacked here. I still haven’t fully addressed how the Sprint Value Delivery Goal improves the hit rate of deadlines. In my experience, the team-unifying outcomes of using Value as a measure of velocity has been worth it regardless of actual or theoretical improvements to shipping The Whole Feature on time. At the very least, we’ll all have a shared sprintly target to aim at that is expressed in the same metric as the quarterly goal: Shipping Stuff That Matters.\nDelivering Value to the business is the reason we exist as a team in the first place, maybe we should be using that as the measurement of our impact.\n\nOrigin: written internally for Justworks\nReferences: Story Points Agile\nTags:in-progresswtp-draftpublish\nCreated: 2024-08-15"}}